int I = ...;	// Number of jobs
int K = ...;	// Number f resources
int T = ...;	// Planning horizon
int P[1..I] = ...;	// Job durations
int D[1..I] = ...;	// Due dates of orders
int A[1..I] = ...;	// Earliest starting times of orders
float WC[1..I][1..K] = ...;	// Work contents of jobs

dvar int C[1..I];	// Completion times of jobs, auxiliary variable
dvar float+ R[1..I][1..K][1..T-4];	// Resource workloads form jobs
dvar float+ f[1..K];		// Resource load peaks
dvar boolean c[1..I][1..T];	// Job completion indicator
dvar float S[1..I][1..T-4];	// Job workload, auxiliary variable for drawing resource profiles

minimize sum(k in 1..K)f[k];	// Minimizing of load peak sum

subject to{
    	forall (i in 1..I) C[i] == sum(t in 1..T) t * c[i][t];	// Setting completion time
	forall (i in 1..I) sum(t in 1..T) c[i][t] == 1;	// Jobs are completed once
	forall (i in 1..I) C[i] - P[i] >= A[i];	// Earliest possible starting time
	forall (t in 1..T-4, k in 1..K) f[k] - sum(i in 1..I)R[i][k][t] >= 0;	// Setting of load peak
	forall (i in 1..I) D[i] - C[i] >= 0;	// Due date must be respected
	forall (i in 1..I, k in 1..K, t in 1..T-4) R[i][k][t] == WC[i][k]/P[i] * sum(u in t..t+P[i]-1)c[i][u];	// Load calculation
	forall (i in 1..I, t in 1..T-4) S[i][t] == sum(k in 1..K)R[i][k][t];	// Setting of S
    C[1] <= C[2] - P[2];	// Precedence constraints of jobs
    C[2] <= C[4] - P[4];	
    C[3] <= C[4] - P[4];
    C[5] <= C[6] - P[6];
    C[6] <= C[8] - P[8];
    C[7] <= C[8] - P[8];
    C[9] <= C[10] - P[10];
    C[10] <= C[12] - P[12];
    C[11] <= C[12] - P[12];
    C[13] <= C[14] - P[14];
    C[14] <= C[16] - P[16];
    C[15] <= C[16] - P[16];
    C[17] <= C[18] - P[18];
    C[18] <= C[20] - P[20];
    C[19] <= C[20] - P[20];
    C[21] <= C[22] - P[22];
    C[22] <= C[24] - P[24];
    C[23] <= C[24] - P[24];
    C[25] <= C[26] - P[26];
    C[26] <= C[28] - P[28];
    C[27] <= C[28] - P[28];
    C[29] <= C[30] - P[30];
    C[30] <= C[32] - P[32];
    C[31] <= C[32] - P[32];
    C[33] <= C[34] - P[34];
    C[34] <= C[36] - P[36];
    C[35] <= C[36] - P[36];
    C[37] <= C[38] - P[38];
    C[38] <= C[40] - P[40];
    C[39] <= C[40] - P[40];
}